{"version":3,"sources":["serviceWorker.ts","redux/action-type.ts","redux/store.ts","redux/reducer.ts","redux/app-state.ts","api.js","config.ts","components/userVacations/userVacations.tsx","components/vacations/vacations.tsx","models/vacation-model.ts","components/adminPage/admin.tsx","components/notFollowingVacations/notFollowingVacations.tsx","components/home/home.tsx","components/loginPage/loginPage.tsx","models/user-model.ts","components/registerPage/register.tsx","components/graphPage/graphPage.tsx","components/layout/layout.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ActionType","store","createStore","oldAppState","action","newAppState","type","getUser","userId","payload","isAdmin","unFollowedVacations","login","getUserVacations","userVacations","getAllVacations","vacations","addVacation","push","this","Array","axios","create","withCredentials","Config","serverUrl","_initialize","UserVacations","props","unsubscribeStore","state","subscribe","getState","setState","id","API","get","response","data","dispatch","alert","message","vacationId","post","followedVacations","console","log","className","map","v","key","checked","onClick","unFollowVacation","destination","description","Date","startDate","toLocaleDateString","endDate","price","src","vacationImg","alt","Component","Vacations","response1","onMouseOver","isLogged","totalFollowers","VacationModel","Admin","setDestination","args","target","value","vacation","setDescription","setPrice","setStartDate","setEndDate","isValidated","isValid","a","addedVacation","deleteVacation","vacationResponse","onChange","UserNotFollowingVacations","userNotFollowVacations","length","followVacation","Home","LoginPage","prop","updateUserName","userName","updatePassword","password","tryLogin","status","history","placeholder","UserModel","firstName","lastName","RegisterPage","setFirstName","firsName","user","setLastName","setUserName","setPassword","register","registeredUser","Graph","filter","vacationName","followers","width","theme","VictoryTheme","material","domainPadding","dependentAxis","tickFormat","x","parseInt","y","Layout","api","href","navBar","to","exact","logout","graphPage","path","component","from","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6731a4c2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum ActionType{\r\n    getAllVacations,\r\n    addVacation,\r\n    unFollowedVacations,\r\n    getUserVacations,\r\n    deleteVacation,\r\n    getAllUsers,\r\n    register,\r\n    login,\r\n    getUser\r\n}","import { createStore } from \"redux\";\r\nimport { AppState } from \"./app-state\";\r\nimport { reduce } from \"./reducer\";\r\n\r\nexport const store = createStore(reduce, new AppState());\r\n","import { AppState } from \"./app-state\";\r\nimport { Action } from \"./action\";\r\nimport { ActionType } from \"./action-type\";\r\n\r\nexport function reduce(oldAppState: AppState, action: Action): AppState {\r\n\r\n    const newAppState = { ...oldAppState };\r\n\r\n    switch (action.type) {\r\n        case ActionType.getUser:\r\n            newAppState.userId = action.payload.userId;\r\n            newAppState.isAdmin = action.payload.isAdmin;\r\n            break;\r\n\r\n        case ActionType.unFollowedVacations:\r\n            newAppState.unFollowedVacations = action.payload;\r\n            break;\r\n\r\n        case ActionType.login:\r\n            newAppState.userId = action.payload.userId;\r\n            newAppState.isAdmin = action.payload.isAdmin;\r\n            break;\r\n\r\n        case ActionType.getUserVacations:\r\n            newAppState.userVacations = action.payload;\r\n            break;\r\n\r\n        case ActionType.getAllVacations:\r\n            newAppState.vacations = action.payload;\r\n            break;\r\n\r\n        case ActionType.addVacation:\r\n            newAppState.vacations.push(action.payload);\r\n            break;\r\n\r\n        default: break;\r\n    }\r\n\r\n    return newAppState;\r\n}","import { VacationModel } from \"../models/vacation-model\";\r\n\r\nexport class AppState {\r\n\r\n    public userId;\r\n    public isAdmin;\r\n    public userVacations:VacationModel[];\r\n    public vacations:VacationModel[];\r\n    public unFollowedVacations:VacationModel[];\r\n    public constructor(){\r\n        this.vacations = new Array();\r\n        this.unFollowedVacations = new Array();\r\n        this.userVacations = new Array();\r\n    }\r\n} ","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n    withCredentials: true\r\n})","export class Config {\r\n\r\n    public static serverUrl: string;\r\n\r\n    public static _initialize() {\r\n        if(process.env.NODE_ENV === \"production\") {\r\n            Config.serverUrl = \"https://shir-vacation-project.herokuapp.com\";\r\n        }\r\n        else {\r\n            Config.serverUrl = \"http://localhost:3000\";\r\n        }\r\n    }\r\n}\r\n\r\nConfig._initialize();","import React, { Component } from \"react\";\r\nimport \"./userVacations.css\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport API from '../../api'\r\nimport { Config } from \"../../config\";\r\n\r\n\r\ninterface userVacationsState {\r\n    userVacations: VacationModel[];\r\n}\r\n\r\nexport class UserVacations extends Component<any, userVacationsState> {\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props:any){\r\n        super(props);\r\n        this.state = {\r\n            userVacations:[],\r\n        }\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const userVacations = store.getState().userVacations;\r\n            this.setState({ userVacations });\r\n        }); \r\n\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        // if(store.getState().userVacations.length > 0){ //Don't get vacations from server if u have them already\r\n        //     return;\r\n        // }\r\n        try {\r\n            //Go to server on this url and bring the vacations\r\n            const id = store.getState().userId\r\n            const response = await API.get<VacationModel[]>(Config.serverUrl + \"/api/vacations/\" + id);\r\n            const userVacations = response.data;\r\n            store.dispatch({ type: ActionType.getUserVacations, payload: userVacations });\r\n            this.setState({ userVacations });\r\n        }\r\n        catch(err){\r\n            alert(err.message);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore(); // Store-הפסק להאזין לשינויים של ה\r\n    }\r\n\r\n    private async unFollowVacation(vacationId)  {\r\n        try {\r\n            const userId = store.getState().userId;\r\n            const response = await API.post(Config.serverUrl + '/api/unfollow-vacation', {userId, vacationId})\r\n            const {followedVacations, unFollowedVacations} = response.data\r\n            store.dispatch({type: ActionType.getUserVacations, payload: followedVacations})\r\n            store.dispatch({type: ActionType.unFollowedVacations, payload: unFollowedVacations})        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    public render(){\r\n        return(\r\n            <div className=\"userVacations\">\r\n                <h3>Vacations you are following:</h3>\r\n                {store.getState().userVacations.map(v => \r\n                    <div className=\"vacation-card\" key={v.vacationId}>\r\n                        <div className=\"followCheck\">\r\n                            <label>Follow</label>\r\n                            <input type=\"checkbox\" checked onClick={() => this.unFollowVacation(v.vacationId)}></input>\r\n                        </div>\r\n                        <p className=\"location\">{v.destination}</p>\r\n                        <p className=\"description\">{v.description}</p>\r\n                        <p>From: {new Date(v.startDate).toLocaleDateString()}</p>\r\n                        <p>To: {new Date(v.endDate).toLocaleDateString()}</p>\r\n                        <p>Price: {v.price}$ </p>\r\n                        {/* <noscript>{this.socket.emit('ready',function() { console.log('hi')} )}</noscript> */}\r\n                        <div className=\"img-container\">\r\n                        <img src={\"/assets/images/\" + v.vacationImg} alt=\"vacation-Pic\" />\r\n                        </div>\r\n                        <br/>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport \"./vacations.css\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport { store } from \"../../redux/store\";\r\nimport { UserVacations } from \"../userVacations/userVacations\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport API from '../../api';\r\nimport { Config } from \"../../config\";\r\n// import io from \"socket.io-client\";\r\n// import { ActionType } from \"../../redux/action-type\";\r\n\r\n\r\ninterface VacationsState{\r\n    vacations: VacationModel[];\r\n    userVacations: VacationModel[];\r\n}\r\n\r\nexport class Vacations extends Component<any, VacationsState> {\r\n\r\n    // public socket = io(\"http://localhost:3000\");\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props:any){\r\n        super(props);\r\n        this.state = {\r\n            vacations:[],\r\n            userVacations:[],\r\n        }    \r\n         \r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const userVacations = store.getState().userVacations;\r\n            this.setState({ userVacations });\r\n        });\r\n\r\n        // this.socket.on('connect', () => {\r\n        //     this.socket.emit(`ready`, `I'm real bot!!!`);\r\n\r\n        //     this.socket.on('server-msg', data => alert(data));\r\n        //     this.socket.on('vacation-update', vacations => {\r\n        //         alert('I received a vacation update');\r\n        //        store.dispatch({type: ActionType.deleteVacation, payload: vacations});\r\n        //     });\r\n        // });\r\n    }  \r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            //Go to server on this url and bring the vacations\r\n            const response1 = await API.get<VacationModel[]>(Config.serverUrl + \"/api/vacations\", {withCredentials: true});\r\n            const vacations = response1.data;\r\n            this.setState({ vacations }); \r\n        }\r\n        catch(err){\r\n            alert(err.message);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore(); // Store-הפסק להאזין לשינויים של ה\r\n    }\r\n\r\n    public isLogged(){\r\n        if(!store.getState().userId){\r\n            alert('To follow vacations pls log in');\r\n        } else {\r\n            console.log(UserVacations);\r\n            alert(\"vacation added to ur list\")\r\n        }\r\n    }\r\n    public render(){\r\n        return(\r\n            <div className=\"vacations\">\r\n                {this.state.vacations.map(v => \r\n                    <div className=\"vacation-card\" key={v.vacationId}>\r\n                        <div className=\"followCheck\">\r\n                            <label>FOLLOW  </label>\r\n                            <input type=\"checkbox\" onMouseOver={this.isLogged}></input>\r\n                        </div>\r\n                        <p className=\"location\">{v.destination}</p>\r\n                        <p className=\"description\">{v.description}</p>\r\n                        <p>From: {new Date(v.startDate).toLocaleDateString()}</p>\r\n                        <p>To: {new Date(v.endDate).toLocaleDateString()}</p>\r\n                        <p>Price: {v.price}$ </p>\r\n\r\n                        <div className=\"img-container\">\r\n                            <p>Following: {v.totalFollowers}</p>\r\n                            <img src={\"/assets/images/\" + v.vacationImg } alt=\"vacation-Pic\" />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export class VacationModel{\r\n    public constructor(\r\n        public vacationId?: number,\r\n        public destination?: string,\r\n        public description?: string,\r\n        public startDate?: Date,\r\n        public endDate?: Date,\r\n        public price?: number,\r\n        public vacationImg?: string,\r\n        public totalFollowers?:number\r\n    ){\r\n    }\r\n}","import React, { Component, ChangeEvent } from \"react\";\r\nimport \"./admin.css\";\r\nimport { store } from \"../../redux/store\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport API from '../../api'\r\nimport { Config } from \"../../config\";\r\n\r\n\r\ninterface VacationsState {\r\n    vacation: VacationModel;\r\n    vacations: VacationModel[];\r\n}\r\n\r\nexport class Admin extends Component<any, VacationsState> {\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            vacations: [],\r\n            vacation: new VacationModel()\r\n        }\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const vacations = store.getState().vacations;\r\n            this.setState({ vacations });\r\n        });\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            //Go to server on this url and bring the vacations\r\n            const response = await API.get<VacationModel[]>(Config.serverUrl + \"/api/vacations\", { withCredentials: true });\r\n            const vacations = response.data;\r\n            store.dispatch({ type: ActionType.getAllVacations, payload: vacations });\r\n            // this.setState({ vacations }); \r\n        }\r\n        catch (err) {\r\n            alert(err.message);\r\n        }\r\n    }\r\n\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore(); // Store-הפסק להאזין לשינויים של ה\r\n    }\r\n\r\n    public setDestination = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const destination = args.target.value;\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.destination = destination;\r\n        this.setState({ vacation });\r\n    }\r\n\r\n    public setDescription = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const description = args.target.value;\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.description = description;\r\n        this.setState({ vacation });\r\n    }\r\n\r\n    public setPrice = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const price = +args.target.value;\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.price = price;\r\n        this.setState({ vacation });\r\n    }\r\n\r\n    public setStartDate = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const startDate = args.target.value;\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.startDate = new Date(startDate);\r\n        this.setState({ vacation });\r\n    }\r\n\r\n    public setEndDate = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const endDate = args.target.value;\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.endDate = new Date(endDate);\r\n        this.setState({ vacation });\r\n    }\r\n\r\n    public isValidated = () => {\r\n        var isValid = true;\r\n        const { destination, description, startDate, endDate, price } = this.state.vacation\r\n        if (!destination || destination === \"\") {\r\n            alert(\"destination name is required\");\r\n            isValid = false;\r\n        }\r\n        else if (!description || description === \"\") {\r\n            alert(\"description is required\");\r\n            isValid = false;\r\n        }\r\n        else if (!price || price < 1) {\r\n            alert(\"Please set price higher than 1\");\r\n            isValid = false;\r\n        }\r\n        else if (!startDate) {\r\n            alert(\"Start Date is a must\");\r\n            isValid = false;\r\n        }\r\n        else if (startDate < new Date()) {\r\n            alert(\"Start Date need to be in future timing\");\r\n            isValid = false;\r\n        }\r\n        else if (!endDate) {\r\n            alert(\"End Date is a must\");\r\n            isValid = false;\r\n        }\r\n        else if (endDate <= new Date()) {\r\n            alert(\"End Date need to be after start date\");\r\n            isValid = false;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n\r\n    public addVacation = async () => {\r\n        if (this.isValidated()) {\r\n            try {\r\n                const response = await API.post<VacationModel>(Config.serverUrl + \"/api/vacations\", this.state.vacation, { withCredentials: true });\r\n                const addedVacation = response.data;\r\n                store.dispatch({ type: ActionType.addVacation, payload: addedVacation });\r\n                alert(\"Vacation added...\");\r\n                // this.props.history.push(\"/home\");\r\n            }\r\n            catch (err) {\r\n                alert(\"Error: \" + err.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    public deleteVacation = async (vacationId) => {\r\n        try {\r\n            // Trying to use socket.io\r\n            // this.socket.emit('delete-vacation-by-id', vacationId);\r\n            \r\n            // The old code that worked :) \r\n            const response = await API.post(Config.serverUrl + \"/api/delete-vacation\", { vacationId }, { withCredentials: true });\r\n            const vacationResponse = await API.get<VacationModel[]>( Config.serverUrl + \"/api/vacations\", { withCredentials: true });\r\n            const vacations = vacationResponse.data;\r\n            store.dispatch({ type: ActionType.getAllVacations, payload: vacations });\r\n        } catch (err) {\r\n            alert(err);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"admin-vacations\">\r\n                <div className=\"insert vacation-card\">\r\n                    <p className=\"insert-header\">Add vacation here:</p>\r\n                    <p> Location:</p>\r\n                    <input type=\"text\" onChange={this.setDestination} value={this.state.vacation.destination}></input>\r\n\r\n                    <p> Description:</p>\r\n                    <input type=\"text\" onChange={this.setDescription} value={this.state.vacation.description}></input>\r\n\r\n                    <p>Start date:</p>\r\n                    <input type=\"date\" onChange={this.setStartDate} ></input>\r\n\r\n                    <p>End date:</p>\r\n                    <input type=\"date\" onChange={this.setEndDate} ></input>\r\n\r\n                    <p> Price:</p>\r\n                    <input type=\"number\" onChange={this.setPrice} value={this.state.vacation.price}></input>\r\n                    <br /><br />\r\n\r\n                    <button className=\"save\" onClick={this.addVacation}>SAVE</button>\r\n                </div>\r\n\r\n                <br /><br /><hr />\r\n\r\n                <h3>Existing vacations</h3>\r\n                {store.getState().vacations.map(v =>\r\n                    <div className=\"vacation-card\" key={v.vacationId}>\r\n                        <p className=\"location\">{v.destination}</p>\r\n                        <p className=\"description\">{v.description}</p>\r\n                        <p>From: {new Date(v.startDate).toLocaleDateString()}</p>\r\n                        <p>To: {new Date(v.endDate).toLocaleDateString()}</p>\r\n                        <p>Price: {v.price}$ </p>\r\n                        <div className=\"img-container\">\r\n                        <img src={\"/assets/images/\" + v.vacationImg} alt=\"vacation-Pic\" />\r\n                        </div>\r\n                        <button className=\"delete\" onClick={() => this.deleteVacation(v.vacationId)}>Delete vacation</button>\r\n                        <br />\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./notFollowingVacations.css\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport API from '../../api'\r\nimport { Config } from \"../../config\";\r\n\r\ninterface userVacationsState {\r\n    userNotFollowVacations: VacationModel[];\r\n}\r\n\r\nexport class UserNotFollowingVacations extends Component<any,userVacationsState>{\r\n    \r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props:any){\r\n        super(props);\r\n        this.state = {\r\n            userNotFollowVacations:[],\r\n        }\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const userNotFollowVacations = store.getState().unFollowedVacations;\r\n            this.setState({ userNotFollowVacations });\r\n        }); \r\n    }\r\n\r\n    public async componentDidMount() {\r\n        if(store.getState().userVacations.length > 0){ //Don't get vacations from server if u have them already\r\n            return;\r\n        }\r\n        try {\r\n            //Go to server on this url and bring the vacations\r\n            const id = store.getState().userId\r\n            const response = await API.get<VacationModel[]>(Config.serverUrl + \"/api/not-following-vacations/\" + id);\r\n            const userNotFollowVacations = response.data;\r\n            store.dispatch({type: ActionType.unFollowedVacations, payload: userNotFollowVacations})\r\n            this.setState({ userNotFollowVacations });\r\n        }\r\n        catch(err){\r\n            alert(err.message);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore(); // Store-הפסק להאזין לשינויים של ה\r\n    }\r\n\r\n    private async followVacation(vacationId) {\r\n        try {\r\n            const userId = store.getState().userId;\r\n            const response = await API.post(Config.serverUrl + '/api/follow-vacation', {userId, vacationId})\r\n            const {followedVacations, unFollowedVacations} = response.data\r\n            store.dispatch({type: ActionType.getUserVacations, payload: followedVacations})\r\n            store.dispatch({type: ActionType.unFollowedVacations, payload: unFollowedVacations})\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    public render(){\r\n        return(\r\n            <div className=\"userVacations\">\r\n                <h3>Vacations you might be intrested in:</h3>\r\n                {this.state.userNotFollowVacations.map(v => \r\n                    <div className=\"vacation-card\" key={v.vacationId}>\r\n                        <div className=\"followCheck\">\r\n                            <label>FOLLOW  </label>\r\n                            <input type=\"checkbox\" onClick={() => this.followVacation(v.vacationId)}></input>\r\n                        </div>\r\n                        <p className=\"location\">{v.destination}</p>\r\n                        <p className=\"description\">{v.description}</p>\r\n                        <p>From: {new Date(v.startDate).toLocaleDateString()}</p>\r\n                        <p>To: {new Date(v.endDate).toLocaleDateString()}</p>\r\n                        <p>Price: {v.price}$ </p>\r\n                        <div className=\"img-container\">\r\n                        <img src={\"/assets/images/\" + v.vacationImg} alt=\"vacation-Pic\" />\r\n                        </div>\r\n                        <br/>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport \"./home.css\";\r\nimport { Vacations } from \"../vacations/vacations\";\r\nimport { UserVacations } from \"../userVacations/userVacations\";\r\nimport { store } from \"../../redux/store\";\r\nimport { Admin } from \"../adminPage/admin\";\r\nimport { UserNotFollowingVacations } from \"../notFollowingVacations/notFollowingVacations\";\r\n// import io from \"socket.io-client\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport API from '../../api'\r\nimport { Config } from \"../../config\";\r\n// import io from \"socket.io-client\";\r\n\r\n\r\nexport class Home extends Component {\r\n\r\n    // public socket = io(\"http:///localhost:3000\");\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            const response = await API.get(Config.serverUrl + '/auth/get-user')\r\n            store.dispatch({type: ActionType.getUser, payload: response.data})\r\n        } catch (err) {\r\n\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        if (store.getState().userId) {\r\n            if (store.getState().isAdmin)\r\n                return (<Admin />)\r\n            else {\r\n                return (\r\n                    <div className=\"home-page\">\r\n\r\n                        <UserVacations />\r\n                        <br /><br />\r\n                        <hr />\r\n                        <UserNotFollowingVacations />\r\n                    </div>\r\n                );\r\n            }\r\n        } else {\r\n            return (\r\n                <Vacations />\r\n            )\r\n        }\r\n    }\r\n}                \r\n","import React, { Component } from \"react\";\r\nimport \"./loginPage.css\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport API from '../../api'\r\nimport { Config } from \"../../config\";\r\n\r\ninterface LoginState {\r\n    userName: string;\r\n    password: string;\r\n    userId:number;\r\n}\r\n\r\nexport class LoginPage extends Component<any, LoginState>{\r\n\r\n    private unsubscribeStore: Unsubscribe; // stop listening to store\r\n\r\n    public constructor(prop: any) {\r\n        super(prop);\r\n        this.state = {\r\n            userName: \"\",\r\n            password: \"\",\r\n            userId: null\r\n        };\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const userId = store.getState().userId;\r\n            this.setState({ userId });\r\n        });\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore(); // Store-הפסק להאזין לשינויים של ה\r\n    }\r\n\r\n    public updateUserName = (args) => this.setState({ userName: args.target.value });\r\n    public updatePassword = (args) => this.setState({ password: args.target.value });\r\n\r\n    public tryLogin = async () => {\r\n        try {\r\n            const { userName, password } = this.state;\r\n            if (userName && password !== \"\") {\r\n                const response = await API.post(Config.serverUrl + \"/auth/login\", { userName, password });\r\n                console.log(response);\r\n\r\n                if (response.status === 200) {\r\n                    store.dispatch({ type: ActionType.login, payload: response.data });\r\n                    alert(\"Hi \" + userName +\", Welcome back!\")\r\n                    this.props.history.push(\"/home\");\r\n                }\r\n            } else {\r\n                alert(\"Please enter user name AND password\")\r\n            }\r\n        }\r\n        catch (err) {\r\n            alert(\"user name and password do not match\");\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"login-section\">\r\n                    <h1>Login page</h1>\r\n\r\n                    <form>\r\n                        <input type=\"text\" onChange={this.updateUserName} value={this.state.userName} placeholder=\"User name...\" />\r\n\r\n                        <br /><br />\r\n\r\n                        <input type=\"password\" value={this.state.password} placeholder=\"Password\" onChange={this.updatePassword}></input>\r\n\r\n                        <br /><br />\r\n                        <button type=\"button\" onClick={this.tryLogin} >Login</button>\r\n                    </form>\r\n\r\n                    <br /><br />\r\n                    <hr />\r\n\r\n                </div>\r\n                <br /><br />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export class UserModel{\r\n    public constructor(\r\n        public userId?: number,\r\n        public firstName?: string,\r\n        public lastName?: string,\r\n        public userName?: string,\r\n        public password?: string,\r\n        public isAdmin?: boolean,\r\n    ){\r\n    }\r\n}","import React, { Component, ChangeEvent } from \"react\";\r\nimport \"./register.css\";\r\nimport { UserModel } from \"../../models/user-model\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport API from '../../api'\r\nimport { Config } from \"../../config\";\r\n\r\ninterface RegisterState{\r\n    user: UserModel;\r\n}\r\n\r\nexport class RegisterPage extends Component<any, RegisterState>{\r\n\r\n    public constructor(prop:any){\r\n        super(prop);\r\n        this.state = {\r\n            user: new UserModel()\r\n        }\r\n    }\r\n\r\n    public setFirstName = (args:ChangeEvent<HTMLInputElement>) => {\r\n        const firsName = args.target.value;\r\n        const user = {...this.state.user};\r\n        user.firstName = firsName;\r\n        this.setState({ user });\r\n    }\r\n\r\n    public setLastName = (args:ChangeEvent<HTMLInputElement>) => {\r\n        const lastName = args.target.value;\r\n        const user = {...this.state.user};\r\n        user.lastName = lastName;\r\n        this.setState({ user });\r\n    }\r\n\r\n    public setUserName = (args:ChangeEvent<HTMLInputElement>) => {\r\n        const userName = args.target.value;\r\n        const user = {...this.state.user};\r\n        user.userName = userName;\r\n        this.setState({ user });\r\n    }\r\n\r\n    public setPassword = (args:ChangeEvent<HTMLInputElement>) => {\r\n        const password = args.target.value;\r\n        const user = {...this.state.user};\r\n        user.password = password;\r\n        this.setState({ user });\r\n    }\r\n\r\n    public isValidated = () => {\r\n        var isValid = true;\r\n        const { firstName, lastName, password, userName } = this.state.user\r\n            if(!firstName || firstName === \"\"){\r\n                alert(\"First name is required\");\r\n                isValid = false;\r\n            }\r\n            else if(!lastName || lastName === \"\") {\r\n                alert(\"Last name is required\");\r\n                isValid = false;\r\n            }\r\n            else if(!userName || userName === \"\") {\r\n                alert(\"Please choose a user name\");\r\n                isValid = false;\r\n            }\r\n            else if(!password || password.length < 5){\r\n                alert(\"password must be at least 5 chars\");\r\n                isValid = false;\r\n            }\r\n            return isValid;            \r\n    } \r\n\r\n    public register = async() => {\r\n        if (this.isValidated()) {\r\n            try {\r\n                const response = await API.post<UserModel>(Config.serverUrl + \"/auth/register\" , this.state.user, { withCredentials: true });\r\n                if(response.status === 210) {\r\n                    alert(\"User name already taken, please choose a different one...\")\r\n                } \r\n                else {\r\n                const registeredUser = response.data;\r\n                store.dispatch({type: ActionType.register, payload:registeredUser});\r\n                alert(\"You have been registered...\");\r\n                this.props.history.push(\"/home\")\r\n                }\r\n            }\r\n            catch(err){\r\n              alert(\"Error: \" + err.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    public render(){\r\n        return(\r\n            <div className=\"register-page\">\r\n                <h1>Registration page</h1>\r\n                <form>\r\n\r\n                    <p>First name: </p>\r\n                    <input type=\"text\" onChange={this.setFirstName} value={this.state.user.firstName}></input>\r\n                    <br/><br/>\r\n\r\n                    <p>Last name: </p>\r\n                    <input type=\"text\" onChange={this.setLastName} value={this.state.user.lastName}></input>\r\n                    <br/><br/>\r\n\r\n                    <p>User name: </p>\r\n                    <input type=\"text\" onChange={this.setUserName} value={this.state.user.userName}></input>\r\n                    <br/><br/>\r\n\r\n                    <p>Password: </p>\r\n                    <input type=\"password\" onChange={this.setPassword} value={this.state.user.password}></input>\r\n                    <br/><br/><br/>\r\n\r\n                    <button type=\"button\" onClick={this.register}>Register</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./graphPage.css\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryTheme } from 'victory';\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport API from '../../api'\r\nimport { Config } from \"../../config\";\r\n\r\n\r\ninterface graphState {\r\n    userVacations: VacationModel[];\r\n    vacations: VacationModel[];\r\n}\r\n\r\nexport class Graph extends Component<any, graphState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            userVacations: [],\r\n            vacations: []\r\n        }\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        if(store.getState().userVacations.length > 0){ //Don't get vacations from server if u have them already\r\n            return;\r\n        }\r\n        try {\r\n            //Go to server on this url and bring the vacations\r\n            const response1 = await API.get<VacationModel[]>(Config.serverUrl + \"/api/vacations\");\r\n            const vacations = response1.data;\r\n            store.dispatch({type: ActionType.getAllVacations, payload: vacations})\r\n        }\r\n        catch (err) {\r\n            alert(err.message);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n\r\n        const vacations = store.getState().vacations.filter(v => v.totalFollowers > 0).map(v => { return {vacationName: v.destination, followers: v.totalFollowers}})\r\n\r\n        const data = [\r\n            { vacationName: 'Sinai', followers: 4 },\r\n            { vacationName: 'Amsterdam', followers: 3 },\r\n            { vacationName: 'New York', followers: 5 },\r\n            { vacationName: 'Mexico', followers: 3 }\r\n        ];\r\n\r\n        return (\r\n            <div className=\"reports\">\r\n                <VictoryChart\r\n                width={1000}\r\n                    theme={VictoryTheme.material}\r\n                    domainPadding={50}>\r\n                    <VictoryAxis\r\n                        // tickValues={[1, 2, 3, 4]}\r\n                        // tickFormat={['Sinai', 'Amsterdam', 'New York', 'Goa']}\r\n                    />\r\n                    <VictoryAxis\r\n                        dependentAxis\r\n                        tickFormat={(x) => parseInt(x, 10)}\r\n                    />\r\n                    <VictoryBar\r\n                        data={vacations}\r\n                        // data accessor for x values\r\n                        x=\"vacationName\"\r\n                        // data accessor for y values\r\n                        y=\"followers\"\r\n                    />\r\n                </VictoryChart>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport \"./layout.css\";\r\nimport { BrowserRouter, Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\nimport { Home } from \"../home/home\";\r\nimport { LoginPage } from \"../loginPage/loginPage\"\r\nimport { RegisterPage } from \"../registerPage/register\";\r\nimport { store } from \"../../redux/store\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { Admin } from \"../adminPage/admin\";\r\nimport { Graph } from \"../graphPage/graphPage\";\r\nimport api from \"../../api\";\r\nimport { Config } from \"../../config\";\r\n\r\n\r\n\r\n\r\nexport class Layout extends Component {\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(prop: any) {\r\n        super(prop);\r\n        this.state = {\r\n            userId: null\r\n        };\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const userId = store.getState().userId;\r\n            this.setState({ userId });\r\n        });\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore(); // Store-הפסק להאזין לשינויים של ה\r\n    }\r\n\r\n    public async logout() {\r\n        await api.post(Config.serverUrl + '/auth/logout')\r\n        window.location.href = \"http://localhost:3001\";\r\n\r\n    }\r\n\r\n    public render() {\r\n        const home = < NavLink to=\"/home\" exact key=\"123456\"> Home</NavLink>\r\n        // const admin = < NavLink to=\"/admin\" exact> Admin</NavLink>\r\n        var navBar = [home];\r\n        const login = <NavLink to=\"/login\" exact key=\"123465\"><span> | </span> Login</NavLink>\r\n        const logout = <NavLink to=\"/logout\" exact key=\"123434365\" onClick={this.logout}><span> | </span> Logout</NavLink>\r\n        const register = <NavLink to=\"/register\" exact key=\"123564\"><span> | </span> Register </NavLink>\r\n        const graphPage = <NavLink to=\"/reports\" exact key=\"1235647\"><span> | </span> Reports </NavLink>\r\n        // const span = <span> | </span>\r\n        \r\n        if (!store.getState().userId) {\r\n            // navBar.push(span);\r\n            navBar.push(login);\r\n            // navBar.push(span);\r\n            navBar.push(register);\r\n        }\r\n            if (store.getState().isAdmin) {\r\n                navBar.push(graphPage)\r\n\r\n        } if (store.getState().userId) {\r\n            navBar.push(logout)\r\n        }\r\n\r\n        return (\r\n            <div className=\"layout\">\r\n                <BrowserRouter>\r\n\r\n                    <nav>\r\n                        {navBar}\r\n                    </nav>\r\n\r\n                    <h1 className=\"Header\">\r\n                        Any where you wanna go...\r\n                    </h1>\r\n\r\n                    <hr /><br/>\r\n                    <div className=\"main-container\">\r\n                    <Switch>\r\n                        <Route path=\"/home\" component={Home} exact key=\"1\"></Route>\r\n                        <Route path=\"/login\" component={LoginPage} exact key=\"2\"></Route>\r\n                        <Route path=\"/register\" component={RegisterPage} exact key=\"3\"></Route>\r\n                        <Route path=\"/admin\" component={Admin} exact key=\"4\"></Route>\r\n                        <Route path=\"/reports\" component={Graph} exact key=\"5\"/>\r\n                        {/* <Route path=\"/logout\" component={Logout} exact key=\"6\"></Route> */}\r\n                        <Redirect from=\"/\" to=\"/home\"></Redirect>\r\n                    </Switch>\r\n                    </div>\r\n                </BrowserRouter>\r\n                <br/>\r\n                <hr/>\r\n                <div className=\"footer\">\r\n                    <footer>&copy;ShirDahan 2020</footer>\r\n                </div>\r\n                <br/>\r\n                <br/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Layout } from './components/layout/layout';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Layout />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}