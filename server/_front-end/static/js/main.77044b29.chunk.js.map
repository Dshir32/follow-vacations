{"version":3,"sources":["serviceWorker.ts","redux/action-type.ts","redux/store.ts","redux/reducer.ts","redux/app-state.ts","api.js","config.ts","components/vacations/vacations.tsx","components/userVacations/userVacations.tsx","models/vacation-model.ts","components/adminPage/admin.tsx","components/notFollowingVacations/notFollowingVacations.tsx","components/home/home.tsx","components/loginPage/loginPage.tsx","models/user-model.ts","components/registerPage/register.tsx","components/graphPage/graphPage.tsx","components/layout/layout.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ActionType","store","createStore","oldAppState","action","newAppState","type","getUser","userId","payload","isAdmin","unFollowedVacations","login","getUserVacations","userVacations","getAllVacations","vacations","addVacation","push","this","Array","axios","create","withCredentials","Config","serverUrl","_initialize","Popup","props","className","text","onClick","closePopup","Component","Vacations","unsubscribeStore","state","showPopup","subscribe","getState","setState","API","get","response1","data","alert","message","allInputs","document","querySelectorAll","forEach","input","checked","Fragment","togglePopup","bind","map","v","key","vacationId","id","destination","description","Date","startDate","toLocaleDateString","endDate","price","totalFollowers","src","vacationImg","alt","UserVacations","response","dispatch","post","followedVacations","defaultChecked","unFollowVacation","VacationModel","Admin","setDestination","args","target","value","destinationError","vacation","errors","setDescription","descriptionError","setPrice","priceError","setStartDate","startDateError","parse","now","setEndDate","endDateError","isValidated","prop","toString","a","addedVacation","deleteVacation","vacationResponse","onChange","Button","disabled","variant","UserNotFollowingVacations","userNotFollowVacations","length","console","log","followVacation","Home","responseUser","LoginPage","updateUserName","userName","updatePassword","password","tryLogin","loginError","status","history","placeholder","UserModel","firstName","lastName","RegisterPage","setFirstName","firstNameError","user","setLastName","lastNameError","setUserName","userNameError","setPassword","passwordError","register","registeredUser","Graph","filter","vacationName","followers","width","theme","VictoryTheme","material","domainPadding","dependentAxis","tickFormat","x","parseInt","y","Layout","Number","err","api","href","navBar","to","exact","logout","graphPage","path","component","from","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.77044b29.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum ActionType{\r\n    getAllVacations,\r\n    addVacation,\r\n    unFollowedVacations,\r\n    getUserVacations,\r\n    deleteVacation,\r\n    getAllUsers,\r\n    register,\r\n    login,\r\n    getUser\r\n}","import { createStore } from 'redux';\r\nimport { AppState } from \"./app-state\";\r\nimport { reduce } from \"./reducer\";\r\n\r\nexport const store = createStore(reduce, new AppState());\r\n","import { AppState } from \"./app-state\";\r\nimport { Action } from \"./action\";\r\nimport { ActionType } from \"./action-type\";\r\n\r\nexport function reduce(oldAppState: AppState, action: Action): AppState {\r\n\r\n    const newAppState = { ...oldAppState };\r\n\r\n    switch (action.type) {\r\n        case ActionType.getUser:\r\n            newAppState.userId = action.payload.userId;\r\n            newAppState.isAdmin = action.payload.isAdmin;\r\n            break;\r\n\r\n        case ActionType.unFollowedVacations:\r\n            newAppState.unFollowedVacations = action.payload;\r\n            break;\r\n\r\n        case ActionType.login:\r\n            newAppState.userId = action.payload.userId;\r\n            newAppState.isAdmin = action.payload.isAdmin;\r\n            break;\r\n\r\n        case ActionType.getUserVacations:\r\n            newAppState.userVacations = action.payload;\r\n            break;\r\n\r\n        case ActionType.getAllVacations:\r\n            newAppState.vacations = action.payload;\r\n            break;\r\n\r\n        case ActionType.addVacation:\r\n            newAppState.vacations.push(action.payload);\r\n            break;\r\n\r\n        default: break;\r\n    }\r\n\r\n    return newAppState;\r\n}","import { VacationModel } from \"../models/vacation-model\";\r\n\r\nexport class AppState {\r\n\r\n    public userId;\r\n    public isAdmin;\r\n    public userVacations:VacationModel[];\r\n    public vacations:VacationModel[];\r\n    public unFollowedVacations:VacationModel[];\r\n    public constructor(){\r\n        this.vacations = new Array();\r\n        this.unFollowedVacations = new Array();\r\n        this.userVacations = new Array();\r\n    }\r\n} ","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n    withCredentials: true\r\n})","export class Config {\r\n\r\n    public static serverUrl: string;\r\n\r\n    public static _initialize() {\r\n        if(process.env.NODE_ENV === \"production\") {\r\n            Config.serverUrl = \"https://shir-vacation-project.herokuapp.com\";\r\n        }\r\n        else {\r\n            Config.serverUrl = \"http://localhost:3000\";\r\n        }\r\n    }\r\n}\r\n\r\nConfig._initialize();","import React, { Component } from \"react\";\r\nimport \"./vacations.css\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport { store } from \"../../redux/store\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport API from '../../api';\r\nimport { Config } from \"../../config\";\r\n// import io from \"socket.io-client\";\r\n// import { ActionType } from \"../../redux/action-type\";\r\n\r\nclass Popup extends Component {\r\n    props: any;\r\n    render() {\r\n      return (\r\n        <div className='popup'>\r\n          <div className='popup_inner'>\r\n            <h1>{this.props.text}</h1>\r\n            <button onClick={this.props.closePopup}>Close me</button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\ninterface VacationsState{\r\n    vacations: VacationModel[];\r\n    userVacations: VacationModel[];\r\n    showPopup : boolean;\r\n}\r\n\r\nexport class Vacations extends Component<any, VacationsState> {\r\n    // public socket = io(\"http://localhost:3000\");\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props:any){\r\n        super(props);\r\n        this.state = {\r\n            vacations:[],\r\n            userVacations:[],\r\n            showPopup: false,\r\n        }    \r\n         \r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const userVacations = store.getState().userVacations;\r\n            this.setState({ userVacations });\r\n        });\r\n\r\n        // this.socket.on('connect', () => {\r\n        //     this.socket.emit(`ready`, `I'm real bot!!!`);\r\n\r\n        //     this.socket.on('server-msg', data => alert(data));\r\n        //     this.socket.on('vacation-update', vacations => {\r\n        //         alert('I received a vacation update');\r\n        //        store.dispatch({type: ActionType.deleteVacation, payload: vacations});\r\n        //     });\r\n        // });\r\n    }  \r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            //Go to server on this url and bring the vacations\r\n            const response1 = await API.get<VacationModel[]>(Config.serverUrl + \"/api/vacations\", {withCredentials: true});\r\n            const vacations = response1.data;\r\n            this.setState({ vacations }); \r\n        }\r\n        catch(err){\r\n            alert(err.message);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore(); // Store-הפסק להאזין לשינויים של ה\r\n    }\r\n\r\n    public togglePopup() {\r\n        const allInputs = document.querySelectorAll('input');\r\n        if( !store.getState().userId){\r\n            this.setState({ showPopup: !this.state.showPopup });\r\n            allInputs.forEach(input => input.checked = false);\r\n        } \r\n      }\r\n\r\n    public render(){\r\n        return(\r\n            <React.Fragment>\r\n            {this.state.showPopup ? <Popup \r\n                text='You have to be logged in to follow vacations'\r\n                closePopup = {this.togglePopup.bind(this)}/> : null}\r\n            \r\n            <div className=\"vacations\">\r\n                {this.state.vacations.map(v => \r\n                    <div className=\"vacation-card\" key={v.vacationId}>\r\n                        <div className=\"followCheck\">\r\n                            <label>FOLLOW  </label>\r\n                            <input id={v.destination} type=\"checkbox\" onClick={this.togglePopup.bind(this)}></input>\r\n                        </div>\r\n                        <p className=\"location\">{v.destination}</p>\r\n                        <p className=\"description\">{v.description}</p>\r\n                        <p>From: {new Date(v.startDate).toLocaleDateString()}</p>\r\n                        <p>To: {new Date(v.endDate).toLocaleDateString()}</p>\r\n                        <p>Price: {v.price}$ </p>\r\n\r\n                        <div className=\"img-container\">\r\n                            <p>Following: {v.totalFollowers}</p>\r\n                            <img src={\"/assets/images/\" + v.vacationImg } alt=\"vacation-Pic\" />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./userVacations.css\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport API from '../../api'\r\nimport { Config } from \"../../config\";\r\n\r\ninterface userVacationsState {\r\n    userVacations: VacationModel[];\r\n}\r\n\r\nexport class UserVacations extends Component<any, userVacationsState> {\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props:any){\r\n        super(props);\r\n        this.state = {\r\n            userVacations:[],\r\n        }\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const userVacations = store.getState().userVacations;\r\n            this.setState({ userVacations });\r\n        }); \r\n\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            //Go to server on this url and bring the vacations\r\n            const id = store.getState().userId\r\n            const response = await API.get<VacationModel[]>(Config.serverUrl + \"/api/vacations/\" + id);\r\n            const userVacations = response.data;\r\n            store.dispatch({ type: ActionType.getUserVacations, payload: userVacations });\r\n            this.setState({ userVacations });\r\n        }\r\n        catch(err){\r\n            alert(err.message);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore(); // Store-הפסק להאזין לשינויים של ה\r\n    }\r\n\r\n    private async unFollowVacation(vacationId)  {\r\n        try {\r\n            const userId = store.getState().userId;\r\n            const response = await API.post(Config.serverUrl + '/api/unfollow-vacation', {userId, vacationId})\r\n            const {followedVacations, unFollowedVacations} = response.data\r\n            store.dispatch({type: ActionType.getUserVacations, payload: followedVacations})\r\n            store.dispatch({type: ActionType.unFollowedVacations, payload: unFollowedVacations})        \r\n        } catch (err) {\r\n            alert(err.message);\r\n        }\r\n    }\r\n\r\n    public render(){\r\n        return(\r\n            <div className=\"userVacations\">\r\n                <h3>Vacations you are following:</h3>\r\n                {store.getState().userVacations.map(v => \r\n                    <div className=\"vacation-card\" key={v.vacationId}>\r\n                        <div className=\"followCheck\">\r\n                            <label>Follow</label>\r\n                            <input type=\"checkbox\" defaultChecked onClick={() => this.unFollowVacation(v.vacationId)}></input>\r\n                        </div>\r\n                        <p className=\"location\">{v.destination}</p>\r\n                        <p className=\"description\">{v.description}</p>\r\n                        <p>From: {new Date(v.startDate).toLocaleDateString()}</p>\r\n                        <p>To: {new Date(v.endDate).toLocaleDateString()}</p>\r\n                        <p>Price: {v.price}$ </p>\r\n                        {/* <noscript>{this.socket.emit('ready',function() { console.log('hi')} )}</noscript> */}\r\n                        <div className=\"img-container\">\r\n                        <img src={\"/assets/images/\" + v.vacationImg} alt=\"vacation-Pic\" />\r\n                        </div>\r\n                        <br/>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}","export class VacationModel{\r\n    public constructor(\r\n        public vacationId?: number,\r\n        public destination?: string,\r\n        public description?: string,\r\n        public startDate?: Date,\r\n        public endDate?: Date,\r\n        public price?: number,\r\n        public vacationImg?: string,\r\n        public totalFollowers?:number\r\n    ){\r\n    }\r\n}","import React, { Component, ChangeEvent } from \"react\";\r\nimport \"./admin.css\";\r\nimport { store } from \"../../redux/store\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport API from '../../api'\r\nimport { Config } from \"../../config\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\ninterface VacationsState {\r\n    vacation: VacationModel;\r\n    vacations: VacationModel[];\r\n    errors: {\r\n        destinationError: String,\r\n        descriptionError: String,\r\n        startDateError: String,\r\n        endDateError: String,\r\n        priceError: String,\r\n    }\r\n}\r\n\r\nexport class Admin extends Component<any, VacationsState> {\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            vacations: [],\r\n            vacation: new VacationModel(),\r\n            errors: {\r\n                destinationError: \" *\",\r\n                descriptionError: \" *\",\r\n                startDateError: \" *\",\r\n                endDateError:\" *\",\r\n                priceError:\" *\"\r\n            }\r\n        }\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const vacations = store.getState().vacations;\r\n            this.setState({ vacations });\r\n        });\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            //Go to server on this url and bring the vacations\r\n            const response = await API.get<VacationModel[]>(Config.serverUrl + \"/api/vacations\", { withCredentials: true });\r\n            const vacations = response.data;\r\n            store.dispatch({ type: ActionType.getAllVacations, payload: vacations });\r\n            // this.setState({ vacations }); \r\n        }\r\n        catch (err) {\r\n            alert(err.message);\r\n        }\r\n    }\r\n\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore(); // Store-הפסק להאזין לשינויים של ה\r\n    }\r\n\r\n    public setDestination = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const destination = args.target.value;\r\n        let destinationError = \"\" ;\r\n        if (destination === \"\"){\r\n            destinationError = \" *Location name is required\";\r\n        }\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.destination = destination;\r\n        this.setState({ vacation });\r\n\r\n        const errors = {...this.state.errors }\r\n        errors.destinationError = destinationError;\r\n        this.setState({ errors });\r\n    }\r\n\r\n    public setDescription = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const description = args.target.value;\r\n        let descriptionError = \"\" ;\r\n        if(description === \"\"){\r\n            descriptionError = \" *Description is required\";\r\n        }\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.description = description;\r\n        this.setState({ vacation });\r\n\r\n        const errors = {...this.state.errors }\r\n        errors.descriptionError = descriptionError;\r\n        this.setState({ errors });\r\n    }\r\n\r\n    public setPrice = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const price = +args.target.value;\r\n        let priceError = \"\";\r\n        if(price <= 0){\r\n            priceError = \" *Price need to be higher than 0\"\r\n        }\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.price = price;\r\n        this.setState({ vacation });\r\n\r\n        const errors = {...this.state.errors }\r\n        errors.priceError = priceError;\r\n        this.setState({ errors });\r\n    }\r\n\r\n    \r\n    public setStartDate = (args: ChangeEvent<HTMLInputElement>) => {\r\n        var startDate = args.target.value;\r\n        let startDateError = \"\";\r\n        if(!startDate || startDate === \"\"){\r\n           startDateError = \" *Required!\";\r\n        }\r\n        if(Date.parse(startDate) < Date.now()) {\r\n            startDateError = \" *Date must be in the future!\"\r\n        }\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.startDate = new Date(startDate);\r\n        this.setState({ vacation });\r\n\r\n        const errors = {...this.state.errors }\r\n        errors.startDateError = startDateError;\r\n        this.setState({ errors });\r\n    }\r\n\r\n    public setEndDate = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const endDate = args.target.value;\r\n        let endDateError = \"\";\r\n        if(!endDate || endDate === \"\"){\r\n            endDateError = \" *Required!\"\r\n        }\r\n        if(Date.parse(endDate) <  Date.now()) {\r\n            endDateError = \" *Date must be in the future!\"\r\n        }\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.endDate = new Date(endDate);\r\n        this.setState({ vacation });\r\n\r\n        const errors = {...this.state.errors }\r\n        errors.endDateError = endDateError;\r\n        this.setState({ errors });\r\n    }\r\n\r\n    public isValidated = () => {\r\n        for(const prop in this.state.errors) {\r\n            if(this.state.errors[prop].toString() !== \"\") {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    public addVacation = async () => {\r\n        if (this.isValidated()) {\r\n            try {\r\n                const response = await API.post<VacationModel>(Config.serverUrl + \"/api/vacations\", this.state.vacation, { withCredentials: true });\r\n                const addedVacation = response.data;\r\n                store.dispatch({ type: ActionType.addVacation, payload: addedVacation });\r\n                alert(\"Vacation added...\");\r\n            }\r\n            catch (err) {\r\n                alert(\"Error: \" + err.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    public deleteVacation = async (vacationId) => {\r\n        try {\r\n            const response = await API.post(Config.serverUrl + \"/api/delete-vacation\", { vacationId }, { withCredentials: true });\r\n            const vacationResponse = await API.get<VacationModel[]>( Config.serverUrl + \"/api/vacations\", { withCredentials: true });\r\n            const vacations = vacationResponse.data;\r\n            store.dispatch({ type: ActionType.getAllVacations, payload: vacations });\r\n        } catch (err) {\r\n            alert(err);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"admin-vacations\">\r\n                <div className=\"insert vacation-card\">\r\n                    <p className=\"insert-header\">Add vacation here:</p>\r\n                    <p> Location:</p>\r\n                    <input type=\"text\" onChange={this.setDestination} value={this.state.vacation.destination}></input>\r\n                    <span className=\"error\">{this.state.errors.destinationError}</span>\r\n\r\n                    <p> Description:</p>\r\n                    <input type=\"text\" onChange={this.setDescription} value={this.state.vacation.description}></input>\r\n                    <span className=\"error\">{this.state.errors.descriptionError}</span>\r\n\r\n                    <p>Start date:</p>\r\n                    <input type=\"date\" onChange={this.setStartDate} ></input>\r\n                    <span className=\"error\">{this.state.errors.startDateError}</span>\r\n\r\n                    <p>End date:</p>\r\n                    <input type=\"date\" onChange={this.setEndDate} ></input>\r\n                    <span className=\"error\">{this.state.errors.endDateError}</span>\r\n\r\n                    <p> Price:</p>\r\n                    <input type=\"number\" onChange={this.setPrice} value={this.state.vacation.price}></input>\r\n                    <span className=\"error\">{this.state.errors.priceError}</span>\r\n                    <br /><br />\r\n\r\n                    <Button disabled={!this.isValidated()} variant=\"dark\" className=\"save\" onClick={this.addVacation}>SAVE</Button>\r\n                </div>\r\n\r\n                <br /><br /><hr />\r\n\r\n                <h3>Existing vacations</h3>\r\n                {store.getState().vacations.map(v =>\r\n                    <div className=\"vacation-card\" key={v.vacationId}>\r\n                        <p className=\"location\">{v.destination}</p>\r\n                        <p className=\"description\">{v.description}</p>\r\n                        <p>From: {new Date(v.startDate).toLocaleDateString()}</p>\r\n                        <p>To: {new Date(v.endDate).toLocaleDateString()}</p>\r\n                        <p>Price: {v.price}$ </p>\r\n                        <div className=\"img-container\">\r\n                        <img src={\"/assets/images/\" + v.vacationImg} alt=\"vacation-Pic\" />\r\n                        </div>\r\n                        <button className=\"delete\" onClick={() => this.deleteVacation(v.vacationId)}>Delete vacation</button>\r\n                        <br />\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./notFollowingVacations.css\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport API from '../../api'\r\nimport { Config } from \"../../config\";\r\n\r\ninterface userVacationsState {\r\n    userNotFollowVacations: VacationModel[];\r\n}\r\n\r\nexport class UserNotFollowingVacations extends Component<any,userVacationsState>{\r\n    \r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props:any){\r\n        super(props);\r\n        this.state = {\r\n            userNotFollowVacations:[],\r\n        }\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const userNotFollowVacations = store.getState().unFollowedVacations;\r\n            this.setState({ userNotFollowVacations });\r\n        }); \r\n    }\r\n\r\n    public async componentDidMount() {\r\n        if(store.getState().userVacations.length > 0){ //Don't get vacations from server if u have them already\r\n            return;\r\n        }\r\n        try {\r\n            //Go to server on this url and bring the vacations\r\n            const id = store.getState().userId\r\n            const response = await API.get<VacationModel[]>(Config.serverUrl + \"/api/not-following-vacations/\" + id);\r\n            const userNotFollowVacations = response.data;\r\n            store.dispatch({type: ActionType.unFollowedVacations, payload: userNotFollowVacations})\r\n            this.setState({ userNotFollowVacations });\r\n        }\r\n        catch(err){\r\n            alert(err.message);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore(); // Store-הפסק להאזין לשינויים של ה\r\n    }\r\n\r\n    private async followVacation(vacationId) {\r\n        try {\r\n            const userId = store.getState().userId;\r\n            const response = await API.post(Config.serverUrl + '/api/follow-vacation', {userId, vacationId})\r\n            const {followedVacations, unFollowedVacations} = response.data\r\n            store.dispatch({type: ActionType.getUserVacations, payload: followedVacations})\r\n            store.dispatch({type: ActionType.unFollowedVacations, payload: unFollowedVacations})\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    public render(){\r\n        return(\r\n            <div className=\"userVacations\">\r\n                <h3>Vacations you might be intrested in:</h3>\r\n                {this.state.userNotFollowVacations.map(v => \r\n                    <div className=\"vacation-card\" key={v.vacationId}>\r\n                        <div className=\"followCheck\">\r\n                            <label>FOLLOW  </label>\r\n                            <input type=\"checkbox\" onClick={() => this.followVacation(v.vacationId)}></input>\r\n                        </div>\r\n                        <p className=\"location\">{v.destination}</p>\r\n                        <p className=\"description\">{v.description}</p>\r\n                        <p>From: {new Date(v.startDate).toLocaleDateString()}</p>\r\n                        <p>To: {new Date(v.endDate).toLocaleDateString()}</p>\r\n                        <p>Price: {v.price}$ </p>\r\n                        <div className=\"img-container\">\r\n                        <img src={\"/assets/images/\" + v.vacationImg} alt=\"vacation-Pic\" />\r\n                        </div>\r\n                        <br/>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport \"./home.css\";\r\nimport { Vacations } from \"../vacations/vacations\";\r\nimport { UserVacations } from \"../userVacations/userVacations\";\r\nimport { store } from \"../../redux/store\";\r\nimport { Admin } from \"../adminPage/admin\";\r\nimport { UserNotFollowingVacations } from \"../notFollowingVacations/notFollowingVacations\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport API from '../../api'\r\nimport { Config } from \"../../config\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport { Unsubscribe } from \"redux\";\r\n\r\n\r\ninterface userVacationsState {\r\n    userVacations: VacationModel[];\r\n    userId:number;\r\n}\r\n\r\nexport class Home extends Component<any, userVacationsState> {\r\n    private unsubscribeStore: Unsubscribe;\r\n    public constructor(props: any) {\r\n        super(props);\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            const id = store.getState().userId;\r\n            const responseUser = await API.get(Config.serverUrl + '/auth/get-user')\r\n            store.dispatch({type: ActionType.getUser, payload: responseUser.data});\r\n        } catch (err) {\r\n            alert(\"Error: \" + err.message);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        if (store.getState().userId) {\r\n            if (store.getState().isAdmin)\r\n                return (<Admin />)\r\n            else {\r\n                return (\r\n                    <div className=\"home-page\">\r\n                         <UserVacations />\r\n                        <br /><br />\r\n                        <hr />\r\n                        <UserNotFollowingVacations />\r\n                    </div>\r\n                );\r\n            }\r\n        } else {\r\n            return (\r\n                <Vacations />\r\n            )\r\n        }\r\n    }\r\n}                \r\n","import React, { Component } from \"react\";\r\nimport \"./loginPage.css\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport API from '../../api';\r\nimport { Config } from \"../../config\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\ninterface LoginState {\r\n    userName: string;\r\n    password: string;\r\n    userId:number;\r\n    errors: {\r\n        loginError: String\r\n    }\r\n}\r\n\r\nexport class LoginPage extends Component<any, LoginState>{\r\n\r\n    private unsubscribeStore: Unsubscribe; // stop listening to store\r\n\r\n    public constructor(prop: any) {\r\n        super(prop);\r\n        this.state = {\r\n            userName: \"\",\r\n            password: \"\",\r\n            userId: null,\r\n            errors: {\r\n                loginError: \"\",\r\n            }\r\n        };\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const userId = store.getState().userId;\r\n            this.setState({ userId });\r\n        });\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore(); // Store-הפסק להאזין לשינויים של ה\r\n    }\r\n\r\n    public updateUserName = (args) => this.setState({ userName: args.target.value });\r\n    public updatePassword = (args) => this.setState({ password: args.target.value });\r\n\r\n    public tryLogin = async () => {\r\n        let loginError = \"\";\r\n        const errors = {...this.state.errors};\r\n        try {\r\n            const { userName, password } = this.state;\r\n            if (userName && password !== \"\") {\r\n                const response = await API.post(Config.serverUrl + \"/auth/login\", { userName, password });\r\n\r\n                if (response.status === 200) {\r\n                    store.dispatch({ type: ActionType.login, payload: response.data });\r\n\r\n                    this.props.history.push(\"/home\");\r\n                }\r\n            } else {\r\n                loginError =\"* Please enter user name AND password\";\r\n                errors.loginError = loginError;\r\n                this.setState({ errors });\r\n            }\r\n        }\r\n        catch (err) {\r\n            loginError = \"* User name and password do not match\";\r\n            errors.loginError = loginError;\r\n            this.setState({ errors });\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"login-section\">\r\n                    <h1>Login page</h1>\r\n                    <br />\r\n                    <form>\r\n                        <input type=\"text\" onChange={this.updateUserName} value={this.state.userName} placeholder=\"User name...\" />\r\n\r\n                        <br /><br />\r\n\r\n                        <input type=\"password\" value={this.state.password} placeholder=\"Password\" onChange={this.updatePassword}></input>\r\n\r\n                        <br /><br />\r\n                        <span className=\"error\">{this.state.errors.loginError === \"\" ? null: this.state.errors.loginError}</span>\r\n                        <br />\r\n                        <Button variant=\"dark\" className=\"save\" type=\"button\" onClick={this.tryLogin} >Login</Button>\r\n                    </form>\r\n\r\n                    <br /><br />\r\n                    <hr />\r\n\r\n                </div>\r\n                <br /><br />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export class UserModel{\r\n    public constructor(\r\n        public userId?: number,\r\n        public firstName?: string,\r\n        public lastName?: string,\r\n        public userName?: string,\r\n        public password?: string,\r\n        public isAdmin?: boolean,\r\n    ){\r\n    }\r\n}","import React, { Component, ChangeEvent } from \"react\";\r\nimport \"./register.css\";\r\nimport { UserModel } from \"../../models/user-model\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport API from '../../api'\r\nimport { Config } from \"../../config\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\ninterface RegisterState{\r\n    user: UserModel;\r\n    errors: {\r\n        firstNameError: String,\r\n        lastNameError: String,\r\n        userNameError: String,\r\n        passwordError: String,\r\n    }\r\n}\r\n\r\nexport class RegisterPage extends Component<any, RegisterState>{\r\n\r\n    public constructor(prop:any){\r\n        super(prop);\r\n        this.state = {\r\n            user: new UserModel(),\r\n            errors: {\r\n                firstNameError: \" *\",\r\n                lastNameError: \" *\",\r\n                userNameError: \" *\",\r\n                passwordError: \" *\",\r\n            }\r\n        }\r\n    }\r\n\r\n    public setFirstName = (args:ChangeEvent<HTMLInputElement>) => {\r\n        const firstName = args.target.value;\r\n        let firstNameError = \"\";\r\n        if(firstName === \"\" || !firstName){\r\n            firstNameError = \" *Required\"\r\n        }\r\n        const user = {...this.state.user};\r\n        user.firstName = firstName;\r\n        this.setState({ user });\r\n\r\n        const errors = {...this.state.errors};\r\n        errors.firstNameError = firstNameError;\r\n        this.setState({ errors });\r\n\r\n    }\r\n\r\n    public setLastName = (args:ChangeEvent<HTMLInputElement>) => {\r\n        const lastName = args.target.value;\r\n        let lastNameError = \"\";\r\n        if(lastName === \"\" || !lastName){\r\n            lastNameError = \" *Required\"\r\n        }\r\n        const user = {...this.state.user};\r\n        user.lastName = lastName;\r\n        this.setState({ user });\r\n\r\n        const errors = {...this.state.errors};\r\n        errors.lastNameError = lastNameError;\r\n        this.setState({ errors });\r\n    }\r\n\r\n    public setUserName = (args:ChangeEvent<HTMLInputElement>) => {\r\n        const userName = args.target.value;\r\n        let userNameError = \"\";\r\n        if(userName === \"\" || !userName){\r\n            userNameError = \" *Required\"\r\n        }\r\n        const user = {...this.state.user};\r\n        user.userName = userName;\r\n        this.setState({ user });\r\n\r\n        const errors = {...this.state.errors};\r\n        errors.userNameError = userNameError;\r\n        this.setState({ errors });\r\n    }\r\n\r\n    public setPassword = (args:ChangeEvent<HTMLInputElement>) => {\r\n        const password = args.target.value;\r\n        let passwordError = \"\";\r\n        if(password === \"\" || !password || password.length < 5){\r\n            passwordError = \" *Required, min 5 chars long\"\r\n        }\r\n        const user = {...this.state.user};\r\n        user.password = password;\r\n        this.setState({ user });\r\n\r\n        const errors = {...this.state.errors};\r\n        errors.passwordError = passwordError;\r\n        this.setState({ errors });\r\n    }\r\n\r\n    public isValidated = () => {      \r\n        for(const prop in this.state.errors) {\r\n            if(this.state.errors[prop].toString() !== \"\") {\r\n                return false;\r\n            }\r\n        }\r\n        return true;    \r\n    } \r\n\r\n    public register = async() => {\r\n        const errors = {...this.state.errors};\r\n        try {\r\n            const response = await API.post<UserModel>(Config.serverUrl + \"/auth/register\" , this.state.user, { withCredentials: true });\r\n            if(response.status === 210) {\r\n            errors.userNameError = \" *Already taken!\";\r\n            this.setState({ errors });\r\n            } \r\n            else {\r\n            const registeredUser = response.data;\r\n            store.dispatch({type: ActionType.register, payload:registeredUser});\r\n            alert(\"You have been registered...\");\r\n            this.props.history.push(\"/home\")\r\n            }\r\n        }\r\n        catch(err) {\r\n          alert(\"Error: \" + err.message);\r\n        }\r\n    }\r\n\r\n    public render(){\r\n        return(\r\n            <div className=\"register-page\">\r\n                <h1>Registration page</h1>\r\n                <form>\r\n\r\n                    <p>First name: </p>\r\n                    <input type=\"text\" onChange={this.setFirstName} value={this.state.user.firstName}></input>\r\n                    <span className=\"error\">{this.state.errors.firstNameError}</span>\r\n                    <br/><br/>\r\n\r\n                    <p>Last name: </p>\r\n                    <input type=\"text\" onChange={this.setLastName} value={this.state.user.lastName}></input>\r\n                    <span className=\"error\">{this.state.errors.lastNameError}</span>\r\n                    <br/><br/>\r\n\r\n                    <p>User name: </p>\r\n                    <input type=\"text\" onChange={this.setUserName} value={this.state.user.userName}></input>\r\n                    <span className=\"error\">{this.state.errors.userNameError}</span>\r\n                    <br/><br/>\r\n\r\n                    <p>Password: </p>\r\n                    <input type=\"password\" onChange={this.setPassword} value={this.state.user.password}></input>\r\n                    <span className=\"error\">{this.state.errors.passwordError}</span>\r\n                    <br/><br/><br/>\r\n\r\n                    <Button disabled={!this.isValidated()} variant=\"dark\" className=\"save\" type=\"button\" onClick={this.register}>Register</Button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./graphPage.css\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryTheme } from 'victory';\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport API from '../../api'\r\nimport { Config } from \"../../config\";\r\n\r\n\r\ninterface graphState {\r\n    userVacations: VacationModel[];\r\n    vacations: VacationModel[];\r\n}\r\n\r\nexport class Graph extends Component<any, graphState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            userVacations: [],\r\n            vacations: []\r\n        }\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        if(store.getState().userVacations.length > 0){ //Don't get vacations from server if u have them already\r\n            return;\r\n        }\r\n        try {\r\n            //Go to server on this url and bring the vacations\r\n            const response1 = await API.get<VacationModel[]>(Config.serverUrl + \"/api/vacations\");\r\n            const vacations = response1.data;\r\n            store.dispatch({type: ActionType.getAllVacations, payload: vacations})\r\n        }\r\n        catch (err) {\r\n            alert(err.message);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n\r\n        const vacations = store.getState().vacations.filter(v => v.totalFollowers > 0).map(v => { return {vacationName: v.destination, followers: v.totalFollowers}});\r\n\r\n        return (\r\n            <div className=\"reports\">\r\n                <VictoryChart\r\n                width={1000}\r\n                    theme={VictoryTheme.material}\r\n                    domainPadding={50}>\r\n                    <VictoryAxis />\r\n                    <VictoryAxis\r\n                        dependentAxis\r\n                        tickFormat={(x) => parseInt(x, 10)}\r\n                    />\r\n                    <VictoryBar\r\n                        data={vacations}\r\n                        // data accessor for x values\r\n                        x=\"vacationName\"\r\n                        // data accessor for y values\r\n                        y=\"followers\"\r\n                    />\r\n                </VictoryChart>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport \"./layout.css\";\r\nimport { BrowserRouter, Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\nimport { Home } from \"../home/home\";\r\nimport { LoginPage } from \"../loginPage/loginPage\"\r\nimport { RegisterPage } from \"../registerPage/register\";\r\nimport { store } from \"../../redux/store\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { Admin } from \"../adminPage/admin\";\r\nimport { Graph } from \"../graphPage/graphPage\";\r\nimport api from \"../../api\";\r\nimport { Config } from \"../../config\";\r\n\r\nexport class Layout extends Component {\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n    state = {\r\n        userId: Number,\r\n    };\r\n    public constructor(prop: any) {\r\n        super(prop);\r\n        this.state = {\r\n            userId: null\r\n        }\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const userId = store.getState().userId;\r\n            this.setState({ userId });\r\n        });\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        try{\r\n            const userId = store.getState().userId;\r\n            this.setState({ userId });\r\n        } catch(err){\r\n            alert(err.message);\r\n        }   \r\n    }\r\n    \r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore(); // Store-הפסק להאזין לשינויים של ה\r\n    }\r\n\r\n    public async logout() {\r\n        await api.post(Config.serverUrl + '/auth/logout')\r\n        window.location.href = \"http://localhost:3001\";\r\n    }\r\n\r\n    public render() {\r\n        const home = < NavLink to=\"/home\" exact key=\"123456\"> Home</NavLink>\r\n        var navBar = [home];\r\n        const login = <NavLink to=\"/login\" exact key=\"123465\"><span> | </span> Login</NavLink>\r\n        const logout = <NavLink to=\"/logout\" exact key=\"123434365\" onClick={this.logout}><span> | </span> Logout</NavLink>\r\n        const register = <NavLink to=\"/register\" exact key=\"123564\"><span> | </span> Register </NavLink>\r\n        const graphPage = <NavLink to=\"/reports\" exact key=\"1235647\"><span> | </span> Reports </NavLink>\r\n        \r\n        if (!store.getState().userId) {\r\n            navBar.push(login);\r\n            navBar.push(register);\r\n        }\r\n            if (store.getState().isAdmin) {\r\n                navBar.push(graphPage)\r\n\r\n        } if (store.getState().userId) {\r\n            navBar.push(logout)\r\n        }\r\n\r\n        return (\r\n            <div className=\"layout\">\r\n                <BrowserRouter>\r\n\r\n                    <nav className=\"navbar fixed-top bg-secondary text-dark\">\r\n                        <div>\r\n                            {navBar}\r\n                        </div>\r\n                    </nav>\r\n\r\n                    <h1 className=\"Header\">\r\n                        Any where you wanna go...\r\n                    </h1>\r\n\r\n                    <hr /><br/>\r\n                    <div className=\"main-container\">\r\n                    <Switch>\r\n                        <Route path=\"/home\" component={Home} exact key=\"1\"></Route>\r\n                        <Route path=\"/login\" component={LoginPage} exact key=\"2\"></Route>\r\n                        <Route path=\"/register\" component={RegisterPage} exact key=\"3\"></Route>\r\n                        <Route path=\"/admin\" component={Admin} exact key=\"4\"></Route>\r\n                        <Route path=\"/reports\" component={Graph} exact key=\"5\"/>\r\n                        <Redirect from=\"/\" to=\"/home\"></Redirect>\r\n                    </Switch>\r\n                    </div>\r\n                </BrowserRouter>\r\n                <br/>\r\n                <hr/>\r\n                <div className=\"footer\">\r\n                    <footer>&copy;ShirDahan 2020</footer>\r\n                </div>\r\n                <br/>\r\n                <br/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Layout } from './components/layout/layout';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Layout />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}